Middle of a given linked list

  Traverse linked list using two pointers. 
  Move one pointer by one and the other pointers by two. 
  When the fast pointer reaches the end slow pointer will reach the middle of the linked list.
  
  
  
  class Node:
    def __init__(self,data):
        self.data=data
        self.next=None

    def description(self):
        print(self.data)



class LinkedList:
    def __init__(self):
        self.head=None

    def push(self,new_data):
        new_node=Node(new_data)
        new_node.next=self.head
        self.head=new_node


    def printList(self):
        temp=self.head
        while(temp):
            print(temp.data)
            temp=temp.next

    def middle(self):
        slow=self.head
        fast=self.head
        while(fast and fast.next):
            slow=slow.next
            fast=fast.next
        print(slow.data)


llist = LinkedList()
llist.push(20)
llist.push(4)
llist.push(15)
llist.push(10)
llist.middle()
